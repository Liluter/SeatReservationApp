import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchSeatsServ } from './seatsAPI'

const initialState = {
  seats: [],
  status: 'idle',
  count: 0
};
let cordsDiff = 0  //counter of the distance between consecutive seats
let count2 
// function to calculate number of max available seats in row-section
const Counter2 = function (elem,index, cordY) {
  if (index===0) {
    cordsDiff = 0
  }
  if (cordY-cordsDiff === 1) {
    if (elem.maxAval === 1) {
    count2++
    } 
    if (elem.maxAval === 0) {
    count2 = 0
    }
  }
  if (cordY-cordsDiff >= 2 || cordY-cordsDiff===0) {
    count2 = 1
    if (elem.maxAval === 0) {
    count2 = 0
    }
  }
  if (cordY-cordsDiff<=0 && elem.maxAval === 0) {
    count2 = 0
    
  }
cordsDiff = (cordY === 14 ? 0 : cordY)
return count2
}


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const fetchSeats = createAsyncThunk('seats/fetchSeats', async () => {
  const res = await fetchSeatsServ()
  
  return res
} )

export const seatsSlice = createSlice({
  name: 'seats',
  initialState,
  reducers: {
    seatsUpdate: (state, action) => {
      state.seats = action.payload
    },
    //statusChange: dispatch status change with data in action.payload
    statusChange: (state, action) => {
      state.status = action.payload
    },
    // countIncrementByAmount: (state, action) => it's a logic to calculate which seats will be 
    // available next to each other by number of seats user input.
    countIncrementByAmount: (state, action) => {
      state.count = action.payload
      count2 = state.count
      state.seats.forEach((e,i,a)=>{
        e.reserved ?  a[i] = Object.assign({}, e, {maxAval: 0}) : a[i] = Object.assign({}, e, {maxAval: 1})
      })
      state.seats.forEach((e,i,a)=>{
        a[i] = Object.assign({}, e, {maxAval: Counter2(e,i, e.cords.y)})
      })
      state.seats.forEach((e,ind,a)=> {
        if (ind !== 0 ) {
          if (e.maxAval > 0) {
            for (let i=0;i<e.maxAval;i++){
              a[ind-i] = Object.assign({}, a[ind-i], {maxAval: e.maxAval})
            }
          }
        } else {
          a[ind] = Object.assign({}, a[ind], {maxAval: e.maxAval })
        }
      })
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(fetchSeats.pending, (state, action) => {
        state.status = "loading"
      })
      .addCase(fetchSeats.fulfilled, (state, action) => {
        state.status = "succeeded"
        state.seats = action.payload
      })
      .addCase(fetchSeats.rejected, (state, action) => {
        state.status= "failed"
        state.error = action.error.message
      })
  },
});

export const { statusChange, seatsUpdate, countIncrementByAmount} = seatsSlice.actions;
export const selectAllSeats = (state) => state.seats.seats
export const countState = (state) => state.seats.count
export default seatsSlice.reducer;
